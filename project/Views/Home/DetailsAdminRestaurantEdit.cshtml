@model project.Models.Restaurant
@{
    ViewBag.Title = "DetailsAdminRestaurantEdit";
}

@using (Html.BeginForm(actionName: "DetailsAdminRestaurantEdit", controllerName: "Home", method: FormMethod.Post))
{
    @Html.HiddenFor(ww => ww.Restaurant_id)
    @Html.HiddenFor(ww => ww.Image1)
    @Html.HiddenFor(ww => ww.Image2)
    @Html.HiddenFor(ww => ww.Image3)
    @Html.HiddenFor(ww => ww.Longitude)
    @Html.HiddenFor(ww => ww.Latitude)
    @Html.HiddenFor(ww => ww.City_Id)
    <div class="det_content details">
        <section class="part1">
            <h1> @Model.Restaurant_Name </h1>
            <div class="container">
                <div class="row">
                    <div class="col-sm-4 wow fadeInDown" data-wow-duration=".8s" data-wow-delay="0s" data-wow-iteration="1">
                        <img src="~/images/@Model.Image1">
                    </div>
                    <div class="col-sm-4 wow fadeInDown" data-wow-duration="1s" data-wow-delay="0s" data-wow-iteration="1">
                        <a href="http://shorturl.at/owCD6"> <img src="~/images/@Model.Image2" /> </a>
                    </div>
                    <div class="col-sm-4 wow fadeInDown" data-wow-duration="1.25s" data-wow-delay="0s" data-wow-iteration="1">
                        <img src="~/images/@Model.Image3">
                    </div>
                </div>
            </div>
        </section>

        <section class="part2">
            <div class="container detdata">
                <h2>Details</h2>
                <div class="form-group row">
                    <label for="#" class="col-sm-2 col-form-label">Name:</label>
                    <div class="col-sm-10">
                        @Html.EditorFor(ww => ww.Restaurant_Name, additionalViewData: new { htmlAttributes = new { @class = "form-control", PlaceHolder = "Name" } })
                        @Html.ValidationMessageFor(ww => ww.Restaurant_Name, "", htmlAttributes: new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group row">
                    <label for="#" class="col-sm-2 col-form-label">Phone:</label>
                    <div class="col-sm-10">
                        @Html.EditorFor(ww => ww.Phone, additionalViewData: new { htmlAttributes = new { @class = "form-control", PlaceHolder = "Phone" } })
                        @Html.ValidationMessageFor(ww => ww.Phone, "", htmlAttributes: new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group row">
                    <label for="#" class="col-sm-2 col-form-label">Open:</label>
                    <div class="col-sm-10">
                        @Html.EditorFor(ww => ww.Open, additionalViewData: new { htmlAttributes = new { @class = "form-control", PlaceHolder = "Open" } })
                        @Html.ValidationMessageFor(ww => ww.Open, "", htmlAttributes: new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group row">
                    <label for="#" class="col-sm-2 col-form-label">Close:</label>
                    <div class="col-sm-10">
                        @Html.EditorFor(ww => ww.Close, additionalViewData: new { htmlAttributes = new { @class = "form-control", PlaceHolder = "Close" } })
                        @Html.ValidationMessageFor(ww => ww.Close, "", htmlAttributes: new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group row">
                    <label for="#" class="col-sm-2 col-form-label">Link:</label>
                    <div class="col-sm-10">
                        <a href="@Model.URL">
                            @Html.EditorFor(ww => ww.URL, additionalViewData: new { htmlAttributes = new { @class = "form-control", PlaceHolder = "Url" } })
                            @Html.ValidationMessageFor(ww => ww.URL, "", htmlAttributes: new { @class = "text-danger" })
                        </a>
                    </div>
                </div>
               
                <div class="form-group row btns">
                    <div class="col-sm-12">
                        <input type="button" class="btn btn-warning" id="displayBtn" value="Show Map">
                        <input type="submit" class="btn btn-primary" value="Save">
                        <button class="btn btn-danger"><a href="/Home/Page4Admin?l=2&id=@Model.City_Id">Cancel</a></button>
                    </div>
                </div>
            </div>
        </section>
        <section class="part3" id="map">
        </section>
    </div>
}
<script>
//import { Modal } from "../../Scripts/bootstrap.bundle";


    var x = document.getElementById("map");

    function getLocation() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(showPosition, showError);
        } else {
            x.innerHTML = "Geolocation is not supported by this browser.";
        }
    }

    function showPosition(position) {

        x.innerHTML = "<table border='2px' width='190px'> <tr><td>Latitude</td> " + "<td>" + position.coords.latitude +
            "</td> </tr><tr><td>Longitude</td> " + "<td>" + position.coords.longitude + "</td></tr><tr><td>Accurancy </td>" + "<td>" + position.coords.accuracy +
            "</td></tr><tr><td>  Date  " + "<td>" + new Date().toISOString() + "</td></tr> </table>";
    }

    function showError(error) {
        switch (error.code) {
            case error.PERMISSION_DENIED:
                x.innerHTML = "User denied the request for Geolocation."
                break;
            case error.POSITION_UNAVAILABLE:
                x.innerHTML = "Location information is unavailable."
                break;
            case error.TIMEOUT:
                x.innerHTML = "The request to get user location timed out."
                break;
            case error.UNKNOWN_ERROR:
                x.innerHTML = "An unknown error occurred."
                break;
        }
    }
    var map = document.querySelector('#map');
    var displayBtn = document.querySelector('#displayBtn')
    displayBtn.addEventListener('click', function () {
        if (navigator.geolocation) {
            //b support geolocation
            navigator.geolocation.getCurrentPosition(initMap, error)
        } else {
            map.innerText = "your browser doesn't support geolocation"
        }
    })

    function initMap(position) {
        accur = position.coords.accuracy;
        var myLatLng = { lat: @Model.Latitude , lng:@Model.Longitude };

        var map = new google.maps.Map(document.getElementById('map'), {
            zoom: 20,
            center: myLatLng
        });

        var marker = new google.maps.Marker({
            position: myLatLng,
            map: map,
            title: '@Model.Restaurant_Name'
        });
    }


    function error(erroObj) {
        var message = ""
        switch (erroObj.code) {
            case 1: {
                message = "allow me to get your location"
            }
                break;
            case 2: {
                message = "unable to get location"
            }
                break;
            case 3: {
                message = "check your connection an try again"
            }
                break;
            default: {
                message = "unkown error, try again."
            }
        }
        map.innerText = message;
    }



//var datee=new Date().toISOString();
//console.log(datee);
 //var accur = position.coords.accuracy;
 //console.log( accur);



</script>